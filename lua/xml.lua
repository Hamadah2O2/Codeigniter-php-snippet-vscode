-- local ls = require("luasnip")
-- -- some shorthands...
-- local s = ls.snippet
-- local sn = ls.snippet_node
-- local t = ls.text_node
-- local i = ls.insert_node
-- local f = ls.function_node
-- local c = ls.choice_node
-- local d = ls.dynamic_node
-- local r = ls.restore_node
-- local l = require("luasnip.extras").lambda
-- local rep = require("luasnip.extras").rep
-- local p = require("luasnip.extras").partial
-- local m = require("luasnip.extras").match
-- local n = require("luasnip.extras").nonempty
-- local dl = require("luasnip.extras").dynamic_lambda
-- local fmt = require("luasnip.extras.fmt").fmt
-- local fmta = require("luasnip.extras.fmt").fmta
-- local types = require("luasnip.util.types")
-- local conds = require("luasnip.extras.conditions")
-- local conds_expand = require("luasnip.extras.conditions.expand")

-- return {
--   s("te", fmt("<{} {} />", {
--     i(1, "name"), i(2, ""),
--   })),
--
--   s("quot", fmt([[
--   &quot;{1}&quot;
--   ]], { i(1) })),
--
--   s("output", {
--     fmt(
--       '<output expression="{1}" newline="{2}" />',
--       {
--         i(1, {"kawan"}),
--         i(2, "True")
--       }
--     )
--   }),
--
--   s("amp", {
--     t("&amp;")
--   }),
--
--   s("lt", {
--     t("&lt;")
--   }),
--
--   s("gt", {
--     t("&gt;")
--   }),
--
--   s("declare", fmt('<declare name="{1}" type="{2}" array="{3}" size="{1}" />', {
--     i(1, ""), i(2, "Integer"), i(3, "False")
--   })),
--
--   s("assign", fmt("<assign variable=\"{}\" expression=\"{}\" />", {
--     i(1, "variable"), i(2, "expression"),
--   })),
--
--   s("while", fmt("<while expression=\"{}\">{}</while>", {
--     i(1, "expression"), i(2, ""),
--   })),
--
--   s("if", fmt("<if expression=\"{}\">\n  <then>\n    {}\n  </then>\n  <else>\n    {}\n  </else>\n</if>", {
--     i(1, ""), i(2, ""), i(3, ""),
--   })),
--
--   s("function", fmt("<function name=\"{}\" type=\"{}\" variable=\"{}\">\n    <parameters>\n        <parameter name=\"{}\" type=\"{}\" array=\"{}\"/>\n    </parameters>\n    <body>\n        {}\n    </body>\n</function>", {
--     i(1, ""), i(2, "String"), i(3, "Var"), i(4, ""), i(5, "String"), i(6, "False"), i(7, ""),
--   })),
-- }
